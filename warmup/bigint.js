//Module to calculate big integers for sum, mult and factorial.
//Implemented for hackerrank.com

//Switchers to ease testing
mult = true;
factB = false;
sumB = false;

//Straightforward recursive implementation for factorial.
function fact(n){
  var  a, b, str = '';
  if (n>0) {
    a = n.toString();
    b = fact(n-1);
    //Make both numbers of equal size by prepending zero if need be
    if (a.length != b.length) {
      for (var i=0;i<Math.abs(b.length-a.length);i++){
        str += '0';
      }
      if (a.length < b.length) {
        a = str + a;
      } else {
        b = str + b;
      }
    }
    return mul(a,b);
  } else {
    return '1';
  }
}

//Multiply two numbers by creating multiplation matrix,
//adding the diagonals that correspond and resolving carriers along the way.
function mul(a,b) {
  var a = a.split('').map(Number),
      b = b.split('').map(Number),
      matrix = createMatrix(a,b),
      zeros = matrix[0].map(function(e){
                return 0;
              }),
      added = matrix.reduce(function(acc, cur){
                return acc.map(function(e,i){
                  return e+cur[i];
                });
              }, zeros),
      result = resolveCarriers(added);
  /*
    Create multiplication matrix and shift rows with zeros so that
    corresponding diagonals that need to be added align.
    Ex: 3912*9637 => 27, 18,  9, 21
                     81, 54, 27, 63
                      9,  6,  3,  7
                     18, 12,  6, 14
    This matrix needs to be aligned as follows:
                     27, 18,  9, 21,  0,  0, 0
                      0, 81, 54, 27, 63,  0, 0
                      0,  0,  9,  6,  3,  7, 0
                      0,  0,  0, 18, 12,  6, 14
    Now the matrix is ready to be added by columns.
   */
  function createMatrix(n1,n2) {
    var matrix = [],
        ln = n1.length,
        row;
    for (var i=0;i<ln;i++){
      row = [];
      //Prepend by Zeros to allign diagonals
      for (j=0;j<=i;j++){
        row.push(0);
      }
      //Do multiplications
      for (var j=0;j<ln;j++){
        row.push(n1[i]*n2[j]);
      }
      //Append extra zeros to ensure all rows are of equal length.
      for (j=i;j<ln-1;j++){
        row.push(0);
      }
      matrix.push(row);
    }
    return matrix;
  }

  function resolveCarriers(line){
    var carriers = [], tens, units,
        isCarryExist = false;
    // Extract all carriers
    line = line.map(function (e, i) {
        if (e > 9) {
          tens = Math.floor(e/10);
          units = e - tens*10;
          isCarryExist = true;
          carriers.push(tens);
          return units;
        } else {
          if (i!=0) carriers.push(0);
          return e;
        }
    });
    carriers.push(0);
    //add up all carriers to corresponding digits
    line = line.map(function (e,i) {
      return line[i] + carriers[i];
    });

    //Repeat as long as there are carriers
    if (isCarryExist) return resolveCarriers(line);
    return line;
  }
  return result.join('').replace(/^0+(?!\.|$)/, '');
}

function processDataFact(input) {
     var a = parseInt(input),
         result = fact(a);
  process.stdout.write(""+result+"\n");
  return result;
}

function processDataMultSum(input) {
  var i_array = input.split('\n'),
      a = i_array[0],
      b = i_array[1],
      str = '',
      result;

  if (a.length != b.length) {
      for (var i=0;i<Math.abs(b.length-a.length);i++){
        str += '0';
      }
      if (a.length < b.length) {
        a = str + a;
      } else {
        b = str + b;
      }
    }
  if (mult) {
    result = mul(a,b);
  } else {
    result = sum(a,b);
  }

  process.stdout.write(""+result+"\n");
  return result;
}

//Summation of two big numbers.
function sum(a,b) {
  var n1 = a.split('').map(Number),
      n2 = b.split('').map(Number),
      result,
      res = n1.map(function (e,i) {
          return (n1[i] + n2[i]);
      });

  function resolveCarriers(s){
    var carriers = [],
        isCarryExist = false;
    // Extract all carriers
    s = s.map(function (e, i) {
        if (e > 9) {
          isCarryExist = true;
          carriers.push(1);
          return e - 10;
        } else {
          if (i!=0) carriers.push(0);
          return e;
        }
    });
    carriers.push(0);
    if (carriers.length != s.length) s.unshift(0);
    //add up all carriers to corresponding digits
    s = s.map(function (e,i) {
      return s[i] + carriers[i];
    });

    //Repeat as long as there are carriers
    if (isCarryExist) return resolveCarriers(s);
    return s;
  }
  result = resolveCarriers(res);
  return result.join('').replace(/^0+(?!\.|$)/, '');
}

//Simple assert function to assert tests pass, else abort test with info.
function assert (i,res,expect) {
  if (res != expect){
    console.log(_input[i],"[FAIL] Expected:", expect, ' Result: ');
    console.log(res);
    return false;
  }
  return true;
}

//Below follow all the various test cases for Sum, Mult and Fact.
process.stdin.resume();
process.stdin.setEncoding("ascii");
_inputMul = [
              ['3912\n9637','37699944'],
              ['127399629618101871061164714369415138889690993275437627420444094492320543272307283661358790533838050723166537248941870298278768240542968408532693894495600991462888770154271773743688518108469133360749226067433284253841524878382663213020300439013395051660095465213244114983915020095532593844192661702194876809221\n127399629618101871061164714369415138889690993275437627420444094492320543272307283661358790533838050723166537248941870298278768240542968408532693894495600991462888770154271773743688518108469133360749226067433284253841524878382663213020300439013395051660095465213244114983915020095532593844192661702194876809221','16230665626829539496846364846421605068633496266642366974186440156905776357124865070099134537692178454550839680039648529831285635023472517919607395124877838728232345141436363969350401288100633039252897589804532630491902403871988594576874275459608054864968620046239403370285569585012407419130091993525295079534895248171253087770436583291478528519821152686366355858015800687162625897427755152129419732981148106944090292626111240902185701945759962562685463018060900637907207649248116836289483912135423843352640032864142166501087219827006118049344055876246941363337018309048510298623616477341561470575671279056158030626841'],
              ['43624\n53721', '2343524904'],
              ['89615\n62066', '5562044590'],
              ['29496\n53183', '1568685768'],
              ['98824\n99908', '9873308192'],
              ['21971\n28293', '621625503'],
              ['31725\n95119', '3017650275'],
              ['78309\n61619', '4825322271'],
              ['47425\n90584', '4295946200'],
              ['92894\n24316', '2258810504'],
              ['29400\n28050', '824670000'],
              ['83144\n72762', '6049723728'],
              ['47094\n70660', '3327662040'],
              ['37629\n38727', '1457258283'],
              ['63622\n11792', '750230624'],
              ['32827\n90730', '2978393710'],
              ['45229\n93880', '4246098520'],
              ['58915\n56771', '3344663465'],
              ['34544\n32894', '1136290336'],
              ['48246\n12797', '617404062'],
              ['89902\n42461', '3817328822'],
              ['59420\n91556', '5440257520'],
              ['67025\n94685', '6346262125'],
              ['79374\n85420', '6780127080'],
              ['57280\n59438', '3404608640'],
              ['14335\n96477', '1382997795'],
              ['87234\n49126', '4285457484'],
              ['18187\n52485', '954544695'],
              ['34925\n51918', '1813236150'],
              ['58987\n61386', '3620975982'],
              ['52684\n46069', '2427099196'],
              ['56311\n39658', '2233181638'],
              ['18756\n96670', '1813142520'],
              ['83949\n27593', '2316404757'],
              ['90759\n68156', '6185770404'],
              ['22415\n94950', '2128304250'],
              ['76791\n81857', '6285880887'],
              ['32416\n81142', '2630299072'],
              ['20970\n93490', '1960485300'],
              ['23904\n98830', '2362432320'],
              ['31100\n62234', '1935477400'],
              ['37159\n19007', '706281113'],
              ['26893\n49126', '1321145518'],
              ['26164\n28852', '754883728'],
              ['52767\n25210', '1330256070'],
              ['12962\n85657', '1110286034'],
              ['27956\n63758', '1782418648'],
              ['82670\n57445', '4748978150'],
              ['75442\n90538', '6830367796'],
              ['83360\n80332', '6696475520'],
              ['32574\n33758', '1099633092'],
              ['71\n34','2414'],
              ['14\n85','1190'],
              ['85\n85','7225'],
              ['16\n7','112'],
              ['56\n17','952'],
              ['61\n46','2806'],
              ['55\n86','4730'],
              ['18\n14','252'],
              ['15\n68','1020'],
              ['100\n43','4300'],
              ['91\n3','273'],
              ['94\n74','6956'],
              ['93\n97','9021'],
              ['100\n33','3300'],
              ['24\n57','1368'],
              ['9\n40','360'],
              ['16\n82','1312'],
              ['67\n3','201'],
              ['99\n88','8712'],
              ['80\n37','2960'],
              ['93\n79','7347'],
              ['24\n0','0'],
              ['5\n24','120'],
              ['21\n69','1449'],
              ['51\n22','1122'],
              ['82\n98','8036'],
              ['54\n97','5238'],
              ['19\n79','1501'],
              ['100\n94','9400'],
              ['25\n27','675'],
              ['40\n1','40'],
              ['22\n8','176'],
              ['62\n18','1116'],
              ['50\n74','3700'],
              ['92\n35','3220'],
              ['70\n91','6370'],
              ['85\n48','4080'],
              ['78\n66','5148'],
              ['22\n85','1870'],
              ['40\n89','3560'],
              ['8\n91','728'],
              ['12\n39','468'],
              ['38\n16','608'],
              ['8\n18','144'],
              ['90\n9','810'],
              ['21\n49','1029'],
              ['88\n40','3520'],
              ['10\n62','620'],
              ['66\n12','792'],
              ['58\n67','3886']
            ];
_inputSum = [
            ['123456789123456789123456789123456789\n123456789123456789123456789123456789','246913578246913578246913578246913578'],
            // ['927399629618101871061164714369415138889690993275437627420444094492320543272307283661358790533838050723166537248941870298278768240542968408532693894495600991462888770154271773743688518108469133360749226067433284253841524878382663213020300439013395051660095465213244114983915020095532593844192661702194876809221\n927399629618101871061164714369415138889690993275437627420444094492320543272307283661358790533838050723166537248941870298278768240542968408532693894495600991462888770154271773743688518108469133360749226067433284253841524878382663213020300439013395051660095465213244114983915020095532593844192661702194876809221','1854799259236203742122329428738830277779381986550875254840888188984641086544614567322717581067676101446333074497883740596557536481085936817065387788991201982925777540308543547487377036216938266721498452134866568507683049756765326426040600878026790103320190930426488229967830040191065187688385323404389753618442'],
            ['46\n36','82'],
            ['47\n84','131'],
            ['63\n92','155'],
            ['26\n41','67'],
            ['51\n28','79'],
            ['6\n43','49'],
            ['92\n79','171'],
            ['74\n53','127'],
            ['84\n23','107'],
            ['55\n18','73'],
            ['61\n23','84'],
            ['56\n62','118'],
            ['46\n3','49'],
            ['94\n71','165'],
            ['31\n66','97'],
            ['91\n5','96'],
            ['66\n22','88'],
            ['65\n78','143'],
            ['63\n85','148'],
            ['48\n63','111'],
            ['14\n52','66'],
            ['31\n88','119'],
            ['12\n50','62'],
            ['49\n47','96'],
            ['59\n41','100'],
            ['86\n73','159'],
            ['79\n17','96'],
            ['24\n77','101'],
            ['80\n43','123'],
            ['21\n86','107'],
            ['57\n7','64'],
            ['94\n8','102'],
            ['13\n18','31'],
            ['78\n81','159'],
            ['56\n75','131'],
            ['41\n20','61'],
            ['4\n51','55'],
            ['22\n65','87'],
            ['3\n11','14'],
            ['80\n74','154'],
            ['19\n5','24'],
            ['50\n84','134'],
            ['74\n12','86'],
            ['48\n79','127'],
            ['34\n71','105'],
            ['15\n59','74'],
            ['22\n75','97'],
            ['4\n53','57'],
            ['17\n38','55']
          ];
_inputFact = [
                ['0','1'],
                ['1','1'],
                ['2','2'],
                ['3','6'],
                ['4','24'],
                ['5','120'],
                ['6','720'],
                ['7','5040'],
                ['8','40320'],
                ['9','362880'],
                ['10','3628800'],
                ['11','39916800'],
                ['12','479001600'],
                ['13','6227020800'],
                ['14','87178291200'],
                ['15','1307674368000'],
                ['16','20922789888000'],
                ['17','355687428096000'],
                ['18','6402373705728000'],
                ['19','121645100408832000'],
                ['20','2432902008176640000'],
                ['21','51090942171709440000'],
                ['22','1124000727777607680000'],
                ['23','25852016738884976640000'],
                ['24','620448401733239439360000'],
                ['25','15511210043330985984000000'],
                ['26','403291461126605635584000000'],
                ['27','10888869450418352160768000000'],
                ['28','304888344611713860501504000000'],
                ['29','8841761993739701954543616000000'],
                ['30','265252859812191058636308480000000'],
                ['31','8222838654177922817725562880000000'],
                ['32','263130836933693530167218012160000000'],
                ['33','8683317618811886495518194401280000000'],
                ['34','295232799039604140847618609643520000000'],
                ['35','10333147966386144929666651337523200000000'],
                ['36','371993326789901217467999448150835200000000'],
                ['37','13763753091226345046315979581580902400000000'],
                ['38','523022617466601111760007224100074291200000000'],
                ['39','20397882081197443358640281739902897356800000000'],
                ['40','815915283247897734345611269596115894272000000000'],
                ['41','33452526613163807108170062053440751665152000000000'],
                ['42','1405006117752879898543142606244511569936384000000000'],
                ['43','60415263063373835637355132068513997507264512000000000'],
                ['44','2658271574788448768043625811014615890319638528000000000'],
                ['45','119622220865480194561963161495657715064383733760000000000'],
                ['46','5502622159812088949850305428800254892961651752960000000000'],
                ['47','258623241511168180642964355153611979969197632389120000000000'],
                ['48','12413915592536072670862289047373375038521486354677760000000000'],
                ['49','608281864034267560872252163321295376887552831379210240000000000'],
                ['50','30414093201713378043612608166064768844377641568960512000000000000'],
                ['51','1551118753287382280224243016469303211063259720016986112000000000000'],
                ['52','80658175170943878571660636856403766975289505440883277824000000000000'],
                ['53','4274883284060025564298013753389399649690343788366813724672000000000000'],
                ['54','230843697339241380472092742683027581083278564571807941132288000000000000'],
                ['55','12696403353658275925965100847566516959580321051449436762275840000000000000'],
                ['56','710998587804863451854045647463724949736497978881168458687447040000000000000'],
                ['57','40526919504877216755680601905432322134980384796226602145184481280000000000000'],
                ['58','2350561331282878571829474910515074683828862318181142924420699914240000000000000'],
                ['59','138683118545689835737939019720389406345902876772687432540821294940160000000000000'],
                ['60','8320987112741390144276341183223364380754172606361245952449277696409600000000000000'],
                ['61','507580213877224798800856812176625227226004528988036003099405939480985600000000000000'],
                ['62','31469973260387937525653122354950764088012280797258232192163168247821107200000000000000'],
                ['63','1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000'],
                ['64','126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000'],
                ['65','8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000'],
                ['66','544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000'],
                ['67','36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000'],
                ['68','2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000'],
                ['69','171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000'],
                ['70','11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000'],
                ['71','850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000'],
                ['72','61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000'],
                ['73','4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000'],
                ['74','330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000'],
                ['75','24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000'],
                ['76','1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000'],
                ['77','145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000'],
                ['78','11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000'],
                ['79','894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000'],
                ['80','71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000'],
                ['81','5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000'],
                ['82','475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000'],
                ['83','39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000'],
                ['84','3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000'],
                ['85','281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000'],
                ['86','24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000'],
                ['87','2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000'],
                ['88','185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000'],
                ['89','16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000'],
                ['90','1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000'],
                ['91','135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000'],
                ['92','12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000'],
                ['93','1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000'],
                ['94','108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000'],
                ['95','10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000'],
                ['96','991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000'],
                ['97','96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000'],
                ['98','9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000'],
                ['99','933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000'],
                ['999','402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000']

             ];
//Conditionas that execute according to what is switched above, top of file.
if (mult) {
  _input = _inputMul;
  processData = processDataMultSum;
} else if (sumB) {
  _input = _inputSum;
  processData = processDataMultSum;
} else if (factB) {
  _input = _inputFact;
  processData = processDataFact;
}

process.stdin.on("data", function (input) {
    _input += input;
});

//Execute corresponding function and assert test cases.
process.stdin.on("end", function () {
   var r, cont = true;
   for (var i = 0; i < _input.length; i++){
     if (cont) {cont = assert(i,processData(_input[i][0]), _input[i][1])};
   }
});